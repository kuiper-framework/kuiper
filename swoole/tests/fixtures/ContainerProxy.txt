namespace kuiper\annotations;

class AnnotationReaderInterface1d356f758499c39080313a53a357a2b2 implements AnnotationReaderInterface
{

    private $pool = null;

    public function __construct(\kuiper\swoole\pool\PoolInterface $pool)
    {
        $this->pool = $pool;
    }

    public function __call(string $method, array $args)
    {
        return \kuiper\swoole\pool\PoolHelper::call($this->pool, function($conn) use ($method, $args) {
        return $conn->$method(...$args);
        });
    }

    public function __destruct()
    {
    }

    public function getClassAnnotations(\ReflectionClass $class)
    {
        return \kuiper\swoole\pool\PoolHelper::call($this->pool, function($conn) use ($class) {
        return $conn->getClassAnnotations($class);
        });
    }

    public function getClassAnnotation(\ReflectionClass $class, $annotationName)
    {
        return \kuiper\swoole\pool\PoolHelper::call($this->pool, function($conn) use ($class, $annotationName) {
        return $conn->getClassAnnotation($class, $annotationName);
        });
    }

    public function getMethodAnnotations(\ReflectionMethod $method)
    {
        return \kuiper\swoole\pool\PoolHelper::call($this->pool, function($conn) use ($method) {
        return $conn->getMethodAnnotations($method);
        });
    }

    public function getMethodAnnotation(\ReflectionMethod $method, $annotationName)
    {
        return \kuiper\swoole\pool\PoolHelper::call($this->pool, function($conn) use ($method, $annotationName) {
        return $conn->getMethodAnnotation($method, $annotationName);
        });
    }

    public function getPropertyAnnotations(\ReflectionProperty $property)
    {
        return \kuiper\swoole\pool\PoolHelper::call($this->pool, function($conn) use ($property) {
        return $conn->getPropertyAnnotations($property);
        });
    }

    public function getPropertyAnnotation(\ReflectionProperty $property, $annotationName)
    {
        return \kuiper\swoole\pool\PoolHelper::call($this->pool, function($conn) use ($property, $annotationName) {
        return $conn->getPropertyAnnotation($property, $annotationName);
        });
    }


}
